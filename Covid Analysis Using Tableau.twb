<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20224.23.0209.1653                               -->
<workbook original-version='18.1' source-build='2022.4.1 (20224.23.0209.1653)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='worldometer_coronavirus_summary_data' inline='true' name='federated.1dn6yj01f06ga91e8cw7k1r3wnb5' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='worldometer_coronavirus_summary_data' name='textscan.06jy6vl1xxd23914vasqn1b4sd3n'>
            <connection class='textscan' directory='C:/Users/ROSHAN/Downloads' filename='worldometer_coronavirus_summary_data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.06jy6vl1xxd23914vasqn1b4sd3n' name='worldometer_coronavirus_summary_data.csv' table='[worldometer_coronavirus_summary_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='string' name='continent' ordinal='1' />
            <column datatype='integer' name='total_confirmed' ordinal='2' />
            <column datatype='real' name='total_deaths' ordinal='3' />
            <column datatype='real' name='total_recovered' ordinal='4' />
            <column datatype='real' name='active_cases' ordinal='5' />
            <column datatype='real' name='serious_or_critical' ordinal='6' />
            <column datatype='integer' name='total_cases_per_1m_population' ordinal='7' />
            <column datatype='real' name='total_deaths_per_1m_population' ordinal='8' />
            <column datatype='real' name='total_tests' ordinal='9' />
            <column datatype='real' name='total_tests_per_1m_population' ordinal='10' />
            <column datatype='integer' name='population' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.06jy6vl1xxd23914vasqn1b4sd3n' name='worldometer_coronavirus_summary_data.csv' table='[worldometer_coronavirus_summary_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='country' ordinal='0' />
            <column datatype='string' name='continent' ordinal='1' />
            <column datatype='integer' name='total_confirmed' ordinal='2' />
            <column datatype='real' name='total_deaths' ordinal='3' />
            <column datatype='real' name='total_recovered' ordinal='4' />
            <column datatype='real' name='active_cases' ordinal='5' />
            <column datatype='real' name='serious_or_critical' ordinal='6' />
            <column datatype='integer' name='total_cases_per_1m_population' ordinal='7' />
            <column datatype='real' name='total_deaths_per_1m_population' ordinal='8' />
            <column datatype='real' name='total_tests' ordinal='9' />
            <column datatype='real' name='total_tests_per_1m_population' ordinal='10' />
            <column datatype='integer' name='population' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>continent</remote-name>
            <remote-type>129</remote-type>
            <local-name>[continent]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>continent</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_confirmed</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_confirmed]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>total_confirmed</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_deaths]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>total_deaths</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_recovered</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_recovered]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>total_recovered</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>active_cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[active_cases]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>active_cases</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>serious_or_critical</remote-name>
            <remote-type>5</remote-type>
            <local-name>[serious_or_critical]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>serious_or_critical</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_cases_per_1m_population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_cases_per_1m_population]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>total_cases_per_1m_population</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths_per_1m_population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_deaths_per_1m_population]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>total_deaths_per_1m_population</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_tests</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_tests]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>total_tests</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_tests_per_1m_population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_tests_per_1m_population]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>total_tests_per_1m_population</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[population]</local-name>
            <parent-name>[worldometer_coronavirus_summary_data.csv]</parent-name>
            <remote-alias>population</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Mortality Rate' datatype='real' name='[Calculation_1160521341830594560]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[total_deaths]*100/[total_confirmed]' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='worldometer_coronavirus_summary_data.csv' datatype='table' name='[__tableau_internal_object_id__].[worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0]' role='measure' type='quantitative' />
      <column caption='Active Cases' datatype='real' name='[active_cases]' role='measure' type='quantitative' />
      <column caption='Continent' datatype='string' name='[continent]' role='dimension' type='nominal' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Population' datatype='integer' name='[population]' role='measure' type='quantitative' />
      <column caption='Serious Or Critical' datatype='real' name='[serious_or_critical]' role='measure' type='quantitative' />
      <column caption='Total Cases Per 1M Population' datatype='integer' name='[total_cases_per_1m_population]' role='measure' type='quantitative' />
      <column caption='Total Confirmed' datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='real' name='[total_deaths]' role='measure' type='quantitative' />
      <column caption='Total Deaths Per 1M Population' datatype='real' name='[total_deaths_per_1m_population]' role='measure' type='quantitative' />
      <column caption='Total Recovered' datatype='real' name='[total_recovered]' role='measure' type='quantitative' />
      <column caption='Total Tests' datatype='real' name='[total_tests]' role='measure' type='quantitative' />
      <column caption='Total Tests Per 1M Population' datatype='real' name='[total_tests_per_1m_population]' role='measure' type='quantitative' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[country]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:country:nk]' palette='tableau-10-medium' type='palette'>
            <map to='#67bf5c'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Saint Pierre And Miquelon&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
            <map to='#67bf5c'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Falkland Islands Malvinas&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Isle Of Man&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Saint Kitts And Nevis&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#6dccda'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Cote D Ivoire&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Holy See&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Turks And Caicos Islands&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Guinea Bissau&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Saint Barthelemy&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Trinidad And Tobago&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Bosnia And Herzegovina&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;China Macao Sar&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Timor Leste&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;China Hong Kong Sar&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Saint Vincent And The Grenadines&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;State Of Palestine&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Antigua And Barbuda&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Caribbean Netherlands&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Democratic Republic Of The Congo&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Sao Tome And Principe&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Saint Martin&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Wallis And Futuna Islands&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='worldometer_coronavirus_summary_data.csv' id='worldometer_coronavirus_summary_data.csv_371B146D08EC4F17851BDB0C91671FC0'>
            <properties context=''>
              <relation connection='textscan.06jy6vl1xxd23914vasqn1b4sd3n' name='worldometer_coronavirus_summary_data.csv' table='[worldometer_coronavirus_summary_data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='country' ordinal='0' />
                  <column datatype='string' name='continent' ordinal='1' />
                  <column datatype='integer' name='total_confirmed' ordinal='2' />
                  <column datatype='real' name='total_deaths' ordinal='3' />
                  <column datatype='real' name='total_recovered' ordinal='4' />
                  <column datatype='real' name='active_cases' ordinal='5' />
                  <column datatype='real' name='serious_or_critical' ordinal='6' />
                  <column datatype='integer' name='total_cases_per_1m_population' ordinal='7' />
                  <column datatype='real' name='total_deaths_per_1m_population' ordinal='8' />
                  <column datatype='real' name='total_tests' ordinal='9' />
                  <column datatype='real' name='total_tests_per_1m_population' ordinal='10' />
                  <column datatype='integer' name='population' ordinal='11' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 2 (generated)' name='[Action2_C6590893B8F0490AA7EB50932364A06E]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Global Cases' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action3_273154A2904E4A6BB9BE372AA5FA4FFF]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Morality Rate Top 10' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 4 (generated)' name='[Action4_49259730D6384A2184DE1EE0E175ECDE]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Death Cases' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 5 (generated)' name='[Action5_DD4D19300C804BA2BDFBE19966C875FF]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Recovery Cases' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 6 (generated)' name='[Action6_399F5499CBCB4842BFB37D6A85F11E13]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Confirmed vs Deaths' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 1 (generated)' name='[Action6_B0931ECFE0274405AFCA2EDD579D35C9]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Top 10 Confirmed Countries' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Confirmed vs Deaths'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Confirmed vs Deaths Top 10</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus_summary_data' name='federated.1dn6yj01f06ga91e8cw7k1r3wnb5' />
          </datasources>
          <datasource-dependencies datasource='federated.1dn6yj01f06ga91e8cw7k1r3wnb5'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column caption='Total Confirmed' datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='real' name='[total_deaths]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action3_273154A2904E4A6BB9BE372AA5FA4FFF]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([total_deaths])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</column>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' />
              <size column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_confirmed:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value='asterisk' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk]</rows>
        <cols>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_confirmed:qk]</cols>
      </table>
      <simple-id uuid='{47085FBD-F046-44A4-98B7-A5FDDC6B6B50}' />
    </worksheet>
    <worksheet name='Death Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Top 10 Death Cases</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus_summary_data' name='federated.1dn6yj01f06ga91e8cw7k1r3wnb5' />
          </datasources>
          <datasource-dependencies datasource='federated.1dn6yj01f06ga91e8cw7k1r3wnb5'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column caption='Total Deaths' datatype='real' name='[total_deaths]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action3_273154A2904E4A6BB9BE372AA5FA4FFF]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([total_deaths])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</column>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk]' value='n#,##0,K;-#,##0,K' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk]' palette='red_green_diverging_10_0' reverse='true' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk]' />
              <color column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk]' />
              <text column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' />
              <text column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{BDAEF26E-0DF7-4628-95F5-A634972BD1E8}' />
    </worksheet>
    <worksheet name='Dual Axis'>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus_summary_data' name='federated.1dn6yj01f06ga91e8cw7k1r3wnb5' />
          </datasources>
          <datasource-dependencies datasource='federated.1dn6yj01f06ga91e8cw7k1r3wnb5'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_recovered]' derivation='Sum' name='[sum:total_recovered:qk]' pivot='key' type='quantitative' />
            <column caption='Total Deaths' datatype='real' name='[total_deaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='real' name='[total_recovered]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_recovered:qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='height' field='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' value='89' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minheight' value='320' />
                <format attr='maxheight' value='320' />
                <format attr='minwidth' value='4520' />
                <format attr='maxwidth' value='4520' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_recovered:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_recovered:qk] + [federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk])</rows>
        <cols>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</cols>
      </table>
      <simple-id uuid='{002CD825-1E47-4D1A-B1C5-E5CFB7A6EB80}' />
    </worksheet>
    <worksheet name='Global Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Global Cases&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus_summary_data' name='federated.1dn6yj01f06ga91e8cw7k1r3wnb5' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1dn6yj01f06ga91e8cw7k1r3wnb5'>
            <column caption='Active Cases' datatype='real' name='[active_cases]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[active_cases]' derivation='Sum' name='[sum:active_cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
            <column caption='Total Confirmed' datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action3_273154A2904E4A6BB9BE372AA5FA4FFF]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_confirmed:qk]' />
              <lod column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' />
              <lod column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:active_cases:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-color' value='#e15759' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Latitude (generated)]</rows>
        <cols>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{CE783E31-8CBF-48F2-AEB9-10E5249E6E8C}' />
    </worksheet>
    <worksheet name='Morality Rate Top 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus_summary_data' name='federated.1dn6yj01f06ga91e8cw7k1r3wnb5' />
          </datasources>
          <datasource-dependencies datasource='federated.1dn6yj01f06ga91e8cw7k1r3wnb5'>
            <column caption='Mortality Rate' datatype='real' name='[Calculation_1160521341830594560]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[total_deaths]*100/[total_confirmed]' />
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1160521341830594560]' derivation='Sum' name='[sum:Calculation_1160521341830594560:qk]' pivot='key' type='quantitative' />
            <column caption='Total Confirmed' datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='real' name='[total_deaths]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action6_B0931ECFE0274405AFCA2EDD579D35C9]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Calculation_1160521341830594560])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:Calculation_1160521341830594560:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</column>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</rows>
        <cols>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:Calculation_1160521341830594560:qk]</cols>
      </table>
      <simple-id uuid='{2A17B32E-1E83-4ABF-A6B1-D76A8752C333}' />
    </worksheet>
    <worksheet name='Recovery Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top 10 Recovery Region&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus_summary_data' name='federated.1dn6yj01f06ga91e8cw7k1r3wnb5' />
          </datasources>
          <datasource-dependencies datasource='federated.1dn6yj01f06ga91e8cw7k1r3wnb5'>
            <column-instance column='[total_recovered]' derivation='Avg' name='[avg:total_recovered:qk]' pivot='key' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_recovered]' derivation='Sum' name='[sum:total_recovered:qk]' pivot='key' type='quantitative' />
            <column caption='Total Recovered' datatype='real' name='[total_recovered]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action3_273154A2904E4A6BB9BE372AA5FA4FFF]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([total_recovered])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</column>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' />
              <size column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[avg:total_recovered:qk]' />
              <text column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' />
              <text column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_recovered:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{155513EC-F5BB-4535-A818-E856CBFD97D7}' />
    </worksheet>
    <worksheet name='Top 10 Confirmed Countries'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Top 10 Confirmed Countries</run>
            <run>Æ </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus_summary_data' name='federated.1dn6yj01f06ga91e8cw7k1r3wnb5' />
          </datasources>
          <datasource-dependencies datasource='federated.1dn6yj01f06ga91e8cw7k1r3wnb5'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
            <column caption='Total Confirmed' datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action3_273154A2904E4A6BB9BE372AA5FA4FFF]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([total_confirmed])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_confirmed:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</column>
            <column>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_confirmed:qk]</rows>
        <cols>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</cols>
      </table>
      <simple-id uuid='{AF249096-9121-4662-9C09-918B18096FB8}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='97298' id='9' param='horz' type-v2='layout-flow' w='98614' x='693' y='1351'>
            <zone h='97298' id='7' type-v2='layout-basic' w='98614' x='693' y='1351'>
              <zone h='48649' id='3' name='Global Cases' w='33264' x='41383' y='1351'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48649' id='5' name='Top 10 Confirmed Countries' w='40690' x='693' y='1351'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48649' id='6' name='Death Cases' w='34716' x='693' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48649' id='11' name='Recovery Cases' w='39238' x='35409' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='42067' id='13' name='Confirmed vs Deaths' w='24660' x='74647' y='56582'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='55231' id='15' name='Morality Rate Top 10' w='24660' x='74647' y='1351'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1750' minheight='1750' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='17' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='97298' id='16' param='vert' type-v2='layout-flow' w='98614' x='693' y='1351'>
                <zone fixed-size='280' h='48649' id='5' is-fixed='true' name='Top 10 Confirmed Countries' w='40690' x='693' y='1351'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48649' id='3' is-fixed='true' name='Global Cases' w='33264' x='41383' y='1351'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='55231' id='15' is-fixed='true' name='Morality Rate Top 10' w='24660' x='74647' y='1351'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48649' id='6' is-fixed='true' name='Death Cases' w='34716' x='693' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48649' id='11' is-fixed='true' name='Recovery Cases' w='39238' x='35409' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='42067' id='13' is-fixed='true' name='Confirmed vs Deaths' w='24660' x='74647' y='56582'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{5191749D-AEFA-41A8-8919-FA3B72ADCD64}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Top 10 Confirmed Countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C7656002-8DA1-4480-A82D-11F3E8852038}' />
    </window>
    <window class='worksheet' name='Global Cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{884A1F85-CC0D-4F3A-8AF2-99425D037BB0}' />
    </window>
    <window class='worksheet' name='Death Cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_deaths:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C8E1C01F-552B-4834-AF71-ADA23548AA24}' />
    </window>
    <window class='worksheet' name='Recovery Cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{551A44C3-1B92-4151-82DF-F91145B0E66C}' />
    </window>
    <window class='worksheet' name='Confirmed vs Deaths'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[sum:total_confirmed:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{173E4BFA-86F8-416B-B3A9-34D5A1D33A1C}' />
    </window>
    <window class='worksheet' name='Morality Rate Top 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E13B41B1-352F-4407-B29A-F89958707922}' />
    </window>
    <window class='worksheet' name='Dual Axis'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1dn6yj01f06ga91e8cw7k1r3wnb5].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{41FEA1AF-B70C-4E6F-9FD6-1A34D3C6FF33}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Confirmed vs Deaths'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Death Cases' />
        <viewpoint name='Global Cases'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Morality Rate Top 10' />
        <viewpoint name='Recovery Cases'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Top 10 Confirmed Countries'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='5' />
      <simple-id uuid='{3870DD9E-1F30-4264-B43E-70CEDF7E2445}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Confirmed vs Deaths' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Death Cases' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dual Axis' width='192'>
      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
      ggnxzAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Global Cases' width='192'>
      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
      CbgH/H+oMhyiifd2BgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Morality Rate Top 10' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Recovery Cases' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Top 10 Confirmed Countries' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAbOElEQVR4nO3daWwc553n8W9VX+yLzfsSKVKURFGkKFIiddG2LluOj2hsYBIHXg+cbBAs
      EBhGgM2r3RdBXu4CAbJvFgicYJCFM55knLVsaewZS6KuJXWQlChKlEiKFO/mfTX7Yh9VtS9o
      0mIsNzlWs0mpng8gqcUu9PPvZv26qqvrX4+kaZqGIOiUvN4FCMJ6EgEQdE0EQNA1EQBB10QA
      BF0TARB0TQRA0DURAEHXRAAEXRMBEHRt3QOgqup6lyDo2LoHQFGU9S5B0LF1D4AgrCdjvB5I
      UxVuXr2EN6xRVFbDXN8dxjxBSvbU0ttwhm0v/Yic6AAfnuvmp2+diNewgvBE4hcATSOiaqSm
      pzPUeQdnVgHHKzO43ztKRlEh0wP9BBUPRfnJwMKuj6ZpqKpKJBKJVxmC8B8StwDIsoE9NQcJ
      +MbpDKioShRFiYIsI5tdGKLTeCU7DmP0q+VlNE1D0zQMBkO8yhCE/5C4BQA0hno66BvzUV37
      PFPdt6lvclNRfYjA9Ah2TWPckI0hIAEgSRKSJKEoCrIsPooI60Na746wSCSCyWRazxIEHYvj
      FiB+5ufnefjwIQUFBSQnJzMzM4Msy7hcLjRNY3BwkHA4zNatWxkcHMRoNJKTk8PDhw9xuVxk
      ZmYiSQtbmpGREVJSUujv7ycUCpGdnU00GsXj8VBSUiLCp3MbMgBnz57FbrfT2trKD3/4Q/7y
      l79QVFTEK6+8gt/v5+7du0xPTzM3N8e9e/cIhUKUlpYyMzOD3+/n9ddfx+l04vV6+d3vfsfb
      b7+N3++nr6+PsbExbDYbc3NzTExMcPTo0fV+usI62pA735mZmdy7d4/k5GTu3r1LZWXl0ju1
      3W7n0KFDuFwuZFnm0KFDHDp0CI/HQ09PD93d3UxOTqKqKg0NDRw/fhxZltm7dy8ul4sDBw6Q
      np5Oe3s7RUVF6/tEhXW3IbcA/f39/PjHP+bjjz+mr68Pv99PMBjkyJEjhMNhGhsbefnllxka
      GmJ8fJxAIMDu3bs5ceIEp0+fxuVyMTc3x507d5iZmWH37t1kZ2ejqipOp5Ps7GzeeustWlpa
      RAh0bkN+CO7t7eXcuXPs3buXmpoafD4fIyMjdHV1UV5ezqefforZbOaNN96gubkZi8XCwYMH
      OXXqFDt37iQrK4vx8XEOHDiA2+3GbDYTCARwuVwkJydz+vRpJiYmOHnyJDk5Oev0zIWNYEMG
      4HFUVWVycnLZB9xvMz4+TkZGhji8KqzoqQmAIKyFDfcZoHngBv/r8v9M2Hj/9eh/Y2/BvoSN
      J2wsGy4AGhqqlrgeAQ1xZUg9EzvJgq6JAAi6JgIg6JoIgKBr8QuAptLeco2LF87TPTzDg9Yb
      nD9fx6hnnmtfnmEipKEGhvm/n9fHbUhBeFJx7AhTCUZlSkqKmZkaJmxM53DtDjr6h7BnOBnu
      GcIXncThWhhy8WoQi11hXz9OYo/K/O34gr7E8TCohNEAMzM+NBY6xGRJBjQMSelo4Uk8mEgx
      L3SELa7o3wiAKgIgJE5cvweIBH14PT5cedswega4UN9NadUhgtNunHIAtzEXszoCsNQGqaoq
      RuPXZciGxH4skWV52fiCvsTtNy/JBqqfe/GRnxRSsXgzcwcAeQCIk8+EjUMcBRJ0TQRA0DUR
      AEHXRAAEXRMBEHRNBEDQNREAQddEAARdEwEQdE0EQNA1EQBB10QABF2L6wwx0Uhk4VRogwEZ
      iKoqJqMJRYliMBiR0IhEFUwmcfalsDHEb03UVDrvNuOZmyHk2EZKdBRPIEJBWQ2D1/+V4mM/
      Iifaz4d1PfzsRy/HbVhBeBJxPR16V3UtD9taSN+cSf+whReq0rnXO0LGlm3MDvUTVLxs2+wC
      IBpdaIxRVZVwOLz0OEo0sdOmKoqybHxBX+K6LxINzuCTkilOMhEJzROJhJBlE7LJgTEyjU92
      YftqjrDFhhhN05Y1pBiMiZ0vzGAwiEsz6lhcA+DzBsjfvAnJbCbTMs+N253srt6Pf3oUO0Ym
      DdnIgYUV/NEL3K50sdu1tt7jC+snrgFIydq0dLuwtIrC0oXbafaChX8XlornkILwRMRhUEHX
      RAAEXRMBEHRNBEDQNREAQddEAARdEwEQdE0EQNA1EQBB10QABF0TARB0TQRA0LW4BiAS9NLZ
      fp9Zf4TA7ASdXX1EVRgZHCCiAVqI/oGReA4pCE8kZgDC4TCKsroGFU1TabvTii0lHYMWpK2j
      F5PmpbN3lIH2G/SMBvAOdnPlzoO4FC4I8RDzdOjf/va3nDhxgr179678SKrC7Ow03vkO8jcX
      Yk3LoXBzOvd6h7HnbmV+oo9+LUxxphVY6AjTNA1FUZbNC6Z81SmWKEpUdITp2ar6Aerq6njx
      xRdjLyTJuNJyKaso42ZzC0aLA++chiYnIclh7JFpJuQ8TPLUwsCPdIE92pFlSPB0RQajAbPZ
      nNAxhY1jVWvbBx98QG1tLcFgkLS0tMcuI0kyO7YXcKv5Njv3HkCec9Pe76F6bwXe2WmSpAyS
      ZSdayB7XJyAIT2LVb7ctLS00NTXxi1/84vELSBL2lBxqn/9qDjBbEYe+upmeng7Awqpv++7V
      CkKcxQzA+++/j8lk4oMPPsBms1FVVZWougQhIWIGwGZbeLd2uRYuZSKuniA8a2IGwD87yOen
      LxJQNWQZ8ssOcrxmR6JqE4Q1F/N7AHtKAW+9exKHYxP/8IPjeCY8iapLEBJiFd8EJ5NhmeIf
      /+lzMjZlr31FgpBAqzgKJJGc7GRPYRlmq7iorfBsWcUWwENTawcTo6Pcu9u99hUJQgKtIgAu
      yrZl09LUwtYK8QFYeLasIgA+2ttHycpJZ25mdu0rEoQEWsVOvRWb00JKdjYup3XtKxKEBFpF
      APzI9kKOHDmC0WxZ+4oEIYFWsQtkwhga48yZMzTf71/7igQhgVZ1GHTXwRcpK9uy4pKhoA9/
      MIzV7sRIFP98lORkJ/N+H0l2BzIKXl8Ip1OcECdsDKtqibz+b//CJ1+cpbVrKMZSGp0tN+kd
      GmLO5+fOrZt03rtNt3ua5gun6ZsJMz/+kI/PXo1T6YLw5FbYAkQZGZ6kYv8hfFEFOdZMKprK
      XMCHopqxFEQxpRVQWZjO/Z5h0gq34XX30aP62ZbnXHhk0REmbAAxAxCNzBMIBvB6A5AUu2tK
      Q6bq4BEsUpAbt7ux2JIJBS1gMCNpNpIi03jkdJKMC4dSRUeYsBHEXNvmxvpouNHI7JSR2kNl
      WC2xTofWmBzqpn/cS2llDcpkDzfv91O1txrfzDg2bJgNGUhBcUq1sHHEDEDqpjJefk7h/JUu
      QqEQUUX91mUlSaaotIqir+YFw1VO3taFm8nWPGBxdrDkJ69aEOIk5odgSZLJKdyGHJykv7+f
      iRlvouoShIRY1WFQgz2d2hcOYnWmrn1FgpBAqzgMKlOcn8atllZGJvXdEDMzM0N/fz+Tk5PU
      1dXhdruX7hsZGWFkZARN02hvb+fatWuoqsrAwAATExNLyw0NDXHu3Dn6+voYHR2lvr6e+fl5
      3G43DQ0NhEKh9XhqurWKACgMDw0Tmp9lZHxu7SvaoMLhMGfPnuX69ev4fD4sFgtffPEFAIqi
      cPfuXR48eMD8/DxTU1P09PTQ3d1NT08P7e3tAGiaxq1bt0hLS8Nut3P69GlUVeX8+fOcOnWK
      aDTK5cuX1/Np6s6qToVQ1DBSNIqW4EOUG8mpU6ew2WxMTEyQlpbGwMAAmzYtTAxuMBg4dOgQ
      JpMJi8WC2WymtLSUkpIS9u3bhyx//TJnZGRw69Ytbty4weHDh+nu7mZ0dJSjR4/y8OHDZVsV
      Ye3FXKPnPaPcH/Lz5n96l9nRHrqm9Xu8vKamhsHBQQBu3bpFMBjE4/HgdruxWCx89tln9PT0
      IMsyp0+fZvv27TgcDq5evUp3dzd5eXlEo1E8noXdSFmWmZqawu/3U1tby+TkJF6vd+Ur8Alx
      JWmPfg37N6YH71LfGeL149WEpjv47OoMb/9dbVwLiEQiy74Iaxq4zm8v/Y+4jhHLL4/9d6oL
      9q9qWU3TUNWFQ8GRSASj0cj169epqalZut9kMi19y/3o7cHBQcxmM/n5+USjUcxmM4qioKoq
      ZrOZaDS6dFuK9Y27EFexvwfILcF19wwf/VMHCjLHXn0jUXVtSJIkYTAYAJb+ff7557+x3KPf
      ci/eLikp+cbPHt01EtdcWh8xAyAZLRx57e9RVQ1JknT7zjTtn+JS9/mEjbcnv4Yt6VsTNp6e
      xQxA0DvKlUtNLJ4qlrt1NzVlhQkoa2OZCkzy19Z/Tth4LmuKCECCxAyAKcnFrspKopqKpoEt
      +fFXhhaEp1XMw6BGk5VNm9P58i//yJ/++CHnm8TsLsKzZVVfhNnSN5OT7STk9cdeVItw7d/P
      4PZH6brTyPm6C4x6Qlw/+69MhjTUwAin/q0hPpULQhys4pstIwde+B4pzjCjnhhHKjSN8YEe
      TEl2QkEvXjmNwwdL6BgYwpZmx93jxqtMYHUuHD1ZPJz46KHFxf8n0t+O/23LJNJqahLiY4UA
      hLl69hSnzj1k964cknKrqSjd/NglVSXIrdud2EwKoeFR7KYkZNkAqBisGajhCTyYSDUvdHwt
      rlTfCECCf/GauvLKluiVUQQgcVYIgImq2pfAWozNlcz2Hd9+ZTjJYOHgC88z1XufcHYekb5W
      LtR3s6PqEMGpIVIkP25jLiZlGPj6OLqqqsuOm8tf/TxRZIO8bPzHMSS6JnnlmoT4WOFVlrA5
      HDy420re5lQejIZ46+XHzxgpSQZS0tJISfvqi6Hsw+xevDNzoUtm4cyZnDiULQjxsaqrQqiq
      svAnsbvCgrDmYm4BAp5xZkIW3v0vP2F8KkB2Tkai6hKEhIgZAO9kL6fPd7F1SxYA496dVJUU
      JKQwQUiE2J8BJCOF20vZXZYPQJJdNLQLz5aYAUjbVMoLOUacNnFRXOHZFPtcIIsdcZKu8Cxb
      1VEgQXhWiQA8pTRNo7m5mT/96U/Mzs4yODjIX//6V+bn55fuv3TpEufPnycUCvHnP/+ZtrY2
      AoEAH3/8Mbdv3156rJs3b1JXV4eiKFy5coULFy6gadrSYyiKsl5Pc82JADylNE0jLy+Pw4cP
      U1dXx6VLlygvL+fatWsAtLa2IssyBw8epK6ujgMHDnD37l0GBwc5fPgwbW1tAPj9frq6ulAU
      haamJvx+P1arlc7OTpqamrh+/TqRSGQ9n+qaEgF4SsmyTCgU4tNPP6WwsJCcnBw2b968tLKO
      jY1x584dPvnkEwoKCvj000+JRCJs2bKFhw8fsmvXLgC8Xi9bt26ltLSUaDTK2NgYTU1NtLe3
      4/F42BHj9JdngTjh5CkVjUaJRqO8/vrrNDY2Eo1GaW9vJykpiWAwSG5uLsnJyYyOjtLY2Mj3
      v/99GhoaaGxsxGAwUFBQQDgcxm6309HRwcjICBUVFRQXF9PQ0EB6ejqtra20tbVRXFxMZWXl
      ijWFQiH++Mc/4vF4eO2117h48SImk4mf/OQnWCwWmpubuXnzJj/72c9obGykubmZ48eP09vb
      S2dnJydOnKCyspL29nbOnTuHzWbje9/7Hh999BE5OTnU1tby5ZdfIkkSP//5z5f1VH9XYgvw
      lJJlmbm5Odra2nj11Vd56aWXmJ6eZt++fZw5c4by8nIURaGwsJB33nmHjo4O9u/fT1ZWFm63
      m8bGRq5cuYLf72fPnj1kZWWRn59PZ2cn27Zt4/Dhw7z//vv86le/WtparMRsNvPTn/6U6upq
      /H4/qampOBwOuru7kSSJffv2sX37dhRFob29nYqKCrKystA0jffee4+hoSE0TSMcDlNUVERq
      aiqtra289957ZGVlkZuby7vvvsvmzY8/I/m7EFuAp5Qsy1RXV1NdXQ1ASkoKubm5qKrKyZMn
      MRgMy65YcfLkyaXbJSUlaJpGMBjEarWSk/P1CYrHjh1bNs7ixb9WY/FD886dO8nNzSUnJ4fm
      5mYslm9+j2SxWEhLS+PLL7/E4XCgqurSRReCwSBZWVkMDg4SDoeXJlHxer3cuXOHY8eOxeXd
      H+IYAE1T6bnfwtCkj+2796FN9/JweI7dNfvov32dLfuew6nOcKlpgGPPVcVrWN2aDkzhCcaY
      tzmwygcKrm6xzalFGOTYp4V7PB4aGhro6urixIkT1NfXo2ka6enp3L59m9nZWS5evIjP56O0
      tJT6+nrKyspQVZXf//73vPbaa9TX15OWlsbFixex2+28+uqr/OEPf6CwsJAHDx7Q1tbGyMgI
      77zzTlwuJRPHLYDEpq3lZGe5ae/rBySqK4p5ODCEho/+vknSo27mwqt8xYWYvmz/nDP3PknY
      eL976/+QnOSKuUxqaiq//vWvl/6/fft2ANxuN/n5+VRVVXH06NGl+xcvKAbw4osvoigL01WV
      l5dTXl6+dN8vf/nLpdtHjhx5wmeyXNwCIEkSYc8Ytx8Mk78pH29ExpJkB8WDyZmHEhhhQpPJ
      ti8M+TTNERZNdE3KyjWpamKPzUciEcLyd5tLLTMzE2BVc7GVlJQkdM62+O0CqQrDYxMkO6xM
      zgUxBKdpnhogfXM5Yc8ILmZwm4owhUcWBn6K5ghLdHeWwbByTfIKuyPxZjKZVqzp91f/N9OB
      yYTUsyllM/9Q859XXE5RFD755BPGx8d58803OXv2LMFgkLfffpvU1NQ47gJJMoVbS5iPaDid
      yaDM459XcDodKNlOZDRyJQOoWXEbUthYOsbvMTI3nJCxgpHV7UpLksQrr7xCT08PU1NTOBwO
      fvCDH+BwOIA4HgaVJAmrPZnUFBdGg4TRbMWV7ECWFt49DCYzZjEjo5BgsizT1bUwx11ZWRkW
      i4UPP/yQrq4uQBwGFZ5xfr+fjz76iOLiYqxWK2NjY/h8PiRJoqOjQwRAeLbZ7XZ+85vfLP2/
      oqICWDhVZHp6WgRA0Kfs7Gyys7NFAIRn24Wus0x4x7/1fhEA4ZnW0HOZ9rF733q/OBlO0DUR
      AEHXRAAEXRMBEHRNBEDQNREAQddEAARdi18ANJX2lmtcrDvHvd4x2m9d5dzZc7ing9R//gmj
      QQ3VN8Q/f3Y5bkMKwpOKa0dYadUB8qaGGRmfJpiUw9EXMmjvG8KVm8FY7wD+6DQZGUnA8jnC
      Hr3wUsKnI1K1FS/8tBFrSvS8ZYqirKKmBBUDaLCqC3atVFP8tgASTAz1Me6XKSnOXT6IJQ1D
      ZIo5zCSbvh4y0b/Ex9FY/xq+m6e17niJz/OPa0fY/Xt3IclFVC3BEhzhUn0PZdW1BKbcOE3z
      DBuysLLQEbbY1a+q6rI5uOLV7b9asiyvOAdYomuSZGnFmiQpsTUZDIZV1JSgYgCJlV8jWLmm
      +PUEy0aOvvLG1z/YkkfZ4u20hebohYtvZMZrSEF4YuIokKBrIgCCrokACLomAiDomgiAoGsi
      AIKuiQAIuiYCIOiaCICgayIAgq6JAAi6JgIg6JoIgKBrcewI0xjpf0DznU40VPo7bnPx0v9j
      yhfm5uU6ZsIa2vwE/36hKW5DCsKTiuulEVMy85n29aKFfUyErRzcm0/3kBtjkspg3xi+6ChR
      w8J0Q482w6x3Y8x6j/84G60mTdM2ZE1PKo4zxEhYbbaFTYqqYjJbMJksqOoMRnsO6vwo05qB
      TOvCkIvtbKqqLpuDazVtbvGkKMqKc4CtxxxhK42Z6DnCFifmjiWhLZGatqrfy0ohiV8ANJWu
      ey3ca+9BS3KizPRzZbibwp37mJ8ewiV5cJu2YAwvTKGzOO+WpmnL5whbRZdPPBkMhhWn21yP
      OcJWqmk95ghbqaaEdoRJ0qqmSZVWKCquTfFbSndTtGM3kiwjb9mEomgYjUa0bCcSkI8E5K70
      QIKQMHHdBTIalydysZV2sX9VeuRvQdgIxGFQQddEAARdEwEQdE0EQNA1EQBB10QABF0TARB0
      TQRA0LU1CoDGYNcdLl1pYCYQoaX+ErMRDS00xfnLt9ZmSEH4DtbmJJewjzG/if2V23k46EYy
      hhjsm8AfHSaghdZkSEH4LtZkC6CpCiarFbPFiqqEMTny0IIjTIZlsm1icnph41iTAEhmO9Hp
      Aa413sTuygRJJkXyEjClI4tTgYQNZG3ejmUTVfsOEoqoWJOSUHOSkdDIQwYte02GFITvYs32
      RwxGM4t7O4vn+MuP/L3Y+PK3c4Q5TE7Ks3evVVnf4DA5VmzCSTIkJbSmlKTUFWvKcmQntCZJ
      k1asaVv6DtKsGQmpZ5OrYFXNU0Wpxch8e++EpK1Tn9vixHOKoiS8CSaWxda/RE+LFMtGe43g
      2alp3T6RPjpH2EZa2VRVRZKkDVfTRqoHvn6dVuq4SqTv8jqt2xZAEDaCp/OYZGiK5s45anbn
      097eh1320TU8iyM9nwO7Crh4+gu2n3iTfHuC3jUDg7SPp7CzyLnsx+HZCfr9YCPMpk2bElML
      0N9yjXZPCDVq4uWXnovxS1YYdk9gCo/jT95BUbplbeppu8b90RCbi0soL85bkzFWY260lxtt
      PZiMDvYf3o9Nlp7SAPB1t7+maiCBOcnJti0F+KcmyK3cxfjDfvJ3b0lUMagadLZcY8QzT/aW
      MgyefgbdU6Tv2IMa8eGdHOL2vW7SChKwEkgy9uRkDFEDvukxHnQ8IL1gOzODnYRM6ezc7OTO
      nTaScneSatJINWlrekUHSZJxOJNx2kx0tDbjiVrJdWn0uKcp2VXJaGcrs0GFkqpKJjrbmE9K
      oygjie6+YfK3V7AlNzUudfS4p3m+tobuB0OoYT8trbef0nOBZBlViaIqEUIRhdyt5ewpL6bj
      /n0G+7vp7hygp6+baIJ37jSjgwMH9qOFxwioaTx/cC9Ws8zc3Bxzs9NEohG6uvvWvA6D0cqW
      rVtxaBG8oQCp+SXkusDnjzDS1YWUnkVu/naqSvPwznnXvh6zlaIt28hMtROIGNhTVYJn2kN0
      3kvv4DAmZxYHKisIT3URSd3BgaqddLa1ElGizM754leHphA1JOFUQgxN9NLr9jylWwCTC5fU
      yeXLQxTsqGRioIuuwUkcmZswGB28Ur2dyb4HeOdVUq0JyLjBgj3JgFFyYjAYcdjSmfP0cb3V
      TV5JBU6nE6MJDCYLWanxeTeLWY5Jpa2lBZPRSb7Fgc1uQ5aDGIwGMnOyGO2+T//QLKrVhtPp
      xGwF1bR2r5PFnozFlYzVEiU9IxOTLGMyGzHbXaQ6bdgMRoxmM9aMIkydD7hxe4KiLVvpGZvD
      bo3fbllJSSHXrl5FiRrZW7qLydRx8SFY0LencxdIEOJEBEDQNREAQddEAARdEwEQdE0EQNA1
      EQBB1/4/sX/16XqE1j8AAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
